buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-core:$version_grgit"
    }
}

import org.ajoberstar.grgit.Grgit

/*
 * --General version pattern --
 * X.Y.Z          - X * 100000000 + Y * 100000 + Z * 100
 *                  X range <1,  21>
 *                  Y range <1, 474>
 *                  Z range <1, 999>
 * 0.0.1          - 100
 * 0.0.2          - 200
 * 0.3.0          - 300000
 * 1.2.3          - 100200300
 * 21.474.836     - 2147483600 - MAX_INT - max version possible
 * ------alpha----
 * 0.0.Z-alpha.A  - (Z - 1) * 100 + A
 *                  A range <1, 33>
 *                  effective version bump comparing to previous release version (0.0.Z-1): <1, 33>
 * 0.0.1-alpha.1  -         1 - just 1st version
 * 0.0.2-alpha.3  -       103 - higher by 3 than previous release version 0.0.1 (100)
 * 1.2.3-alpha.33 - 100200233 - higher by 33 than previous release version 1.2.2 (100200200)
 * ------beta-----
 * 0.0.Z-beta.B  - (Z - 1) * 100 + 33 + B
 *                 B range <1, 33>
 *                 effective version bump comparing to previous release version (0.0.Z-1): <34, 66>
 *                 effective version bump comparing to last alpha (0.0.Z-alpha.33): <1, 33>
 * 0.0.1-beta.1  -        34 - 1st beta higher by one than last alpha 0.0.1-alpha.33 (33)
 * 0.0.2-beta.3  -       136 - higher by 36 (33 + 3) than previous release version 0.0.1 (100)
 *                             higher by 3 than last alpha version 0.0.2-alpha.33 (133)
 * 1.2.3-beta.33 - 100200266 - last beta higher by 66 than previous release version 1.2.2 (100200200)
 *                             last beta higher by 33 than last alpha version 1.2.3-alpha.33 (100200233)
 * ------rc-------
 * 0.0.Z-rc.R    - (Z - 1) * 100 + 33 + 33 + R
 *                 R range <1, 33>
 *                 effective version bump comparing to previous release version (0.0.Z-1): <67, 99>
 *                 effective version bump comparing to last alpha (0.0.Z-alpha.33): <34, 66>
 *                 effective version bump comparing to last beta (0.0.Z-beta.33): <1, 33>
 * 0.0.1-rc.1    -        67 - 1st rc higher by 34 than last alpha 0.0.1-alpha.33 (33)
 *                             1st rc higher by 1 than last beta 0.0.1-beta.33 (66)
 * 0.0.2-rc.3    -       169 - higher by 69 (33 + 33 + 3) than previous release version 0.0.1 (100)
 *                             higher by 34 than last alpha version 0.0.2-alpha.33 (133)
 *                             higher by 3 than last beta version 0.0.2-beta.33 (166)
 * 1.2.3-rc.33   - 100200299 - last rc higher by 99 than previous release version 1.2.2 (100200200)
 *                             last rc higher by 66 than last alpha version 1.2.3-alpha.33 (100200233)
 *                             last rc higher by 33 than last beta version 1.2.3-beta.33 (100200266)
 */
ext {
    git = Grgit.open(currentDir: projectDir)

    def androidCorePrefix = "android/sdk/"

    def alphaPrePremierePostfix = "alpha"
    def betaPrePremierePostfix = "beta"
    def releaseCandidatePrePremierePostfix = "rc"
    def prePremierePostfixes = "-($alphaPrePremierePostfix|$betaPrePremierePostfix|$releaseCandidatePrePremierePostfix)"

    def tagPattern = ~("^$androidCorePrefix[0-9]+\\.[0-9]+\\.[0-9]+($prePremierePostfixes(\\.[0-9]+))*\$")

    def head = git.head()
    def headTag = git.tag.list().find { tag ->
        tag.name.matches(tagPattern) && tag.commit == head
    }

    gitVersionCode = 1
    gitVersionName = git.describe(longDescr: true, tags: true)
    if (gitVersionName == null) {
        gitVersionName = "0.0.0"
    } else {
        gitVersionName = gitVersionName.replace(androidCorePrefix, "")
    }

    if (headTag) {
        gitVersionName = headTag.getName().replace(androidCorePrefix, "")

        def majorMinorPatchMatch = (gitVersionName =~ /(\d+)\.(\d+)\.(\d+)/)
        def stageRevisionMatch = (gitVersionName =~ ~("$prePremierePostfixes\\.(\\d+)"))
        if (majorMinorPatchMatch) {
            def versionMajor = majorMinorPatchMatch.group(1).toInteger()
            def versionMinor = majorMinorPatchMatch.group(2).toInteger()
            versionPatch = majorMinorPatchMatch.group(3).toInteger()
            versionPatch *= 100
            if (stageRevisionMatch) {
                versionRevisionType = stageRevisionMatch.group(1).toString()
                versionRevision = stageRevisionMatch.group(2).toInteger()
                if (versionRevisionType == alphaPrePremierePostfix) {
                    versionPatch -= (100 - versionRevision)
                } else if (versionRevisionType == betaPrePremierePostfix) {
                    versionPatch -= (100 - 33 - versionRevision)      // - (100 + 33) (highest alpha)
                } else if (versionRevisionType == releaseCandidatePrePremierePostfix) {
                    versionPatch -= (100 - 33 - 33 - versionRevision) // - (100 + 33 (highest alpha) + 33 (highest beta))
                }
            }
            gitVersionCode = 100000000 * versionMajor + 100000 * versionMinor + versionPatch
        }
    }
}

task printVersion() {
    println("Version Name: $gitVersionName")
    println("Version Code: $gitVersionCode")
}
